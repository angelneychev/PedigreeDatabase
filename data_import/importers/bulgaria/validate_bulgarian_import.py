#!/usr/bin/env python3
"""
–ü—Ä–∞–≤–∏–ª–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏—è –∏–º–ø–æ—Ä—Ç
–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–Ω–Ω–∏—Ç–µ –ø–æ CSV —Ñ–∞–π–ª–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∏ –Ω–æ–º–µ—Ä–∞, –ë–ï–ó –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –ø–æ–ª–µ –∑–∞ –Ω–∞—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç
"""

import csv
import sys
from datetime import datetime
from pathlib import Path

# Add parent directories to path
sys.path.append(str(Path(__file__).parent.parent.parent.parent))

from database import get_db
from models import Dog
from sqlalchemy.orm import Session

def normalize_for_comparison(text):
    """Normalize text for comparison - same logic as import scripts"""
    if not text or text.strip() == '':
        return None
    
    # Convert to uppercase and remove extra spaces
    normalized = text.strip().upper()
    
    # Handle registration number normalization
    if any(char.isdigit() for char in normalized):
        # This looks like a registration number
        # Remove spaces and normalize common patterns
        normalized = normalized.replace(' ', '')
        
        # Handle specific Norwegian patterns
        if normalized.startswith('N') and '/' in normalized:
            # Convert "N17385/06" to "NO17385/06"
            normalized = normalized.replace('N', 'NO', 1)
    
    return normalized

def run_validation():
    """Run validation based on CSV data and registration numbers"""
    
    csv_file = Path(__file__).parent / "data" / "Registar_BDK_2025_raboten.csv"
    
    print("=== –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ê –ë–™–õ–ì–ê–†–°–ö–ò–Ø –ò–ú–ü–û–†–¢ ===")
    print(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    if not csv_file.exists():
        print(f"‚ùå CSV —Ñ–∞–π–ª—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω: {csv_file}")
        return
    
    # Get database session
    db = next(get_db())
    
    try:
        # 1. –ó–∞—Ä–µ–¥–∏ CSV –¥–∞–Ω–Ω–∏—Ç–µ
        csv_dogs = []
        bulgarian_reg_numbers = set()
        
        with open(csv_file, 'r', encoding='utf-8') as file:
            csv_reader = csv.DictReader(file, delimiter=';')
            
            for row in csv_reader:
                csv_dogs.append(row)
                reg_code = row['regCode'].strip() if row['regCode'] else None
                if reg_code:
                    bulgarian_reg_numbers.add(reg_code)
        
        print(f"üìÑ –ó–∞–ø–∏—Å–∏ –≤ CSV —Ñ–∞–π–ª–∞: {len(csv_dogs)}")
        print(f"üìã –£–Ω–∏–∫–∞–ª–Ω–∏ –±—ä–ª–≥–∞—Ä—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∏ –Ω–æ–º–µ—Ä–∞: {len(bulgarian_reg_numbers)}")
        print()
        
        # 2. –ù–∞–º–µ—Ä–∏ –≤—Å–∏—á–∫–∏ –∫—É—á–µ—Ç–∞ —Å –±—ä–ª–≥–∞—Ä—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∏ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        imported_dogs = []
        for reg_num in bulgarian_reg_numbers:
            dog = db.query(Dog).filter(Dog.registration_number == reg_num).first()
            if dog:
                imported_dogs.append(dog)
        
        print(f"üêï –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –∫—É—á–µ—Ç–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏: {len(imported_dogs)}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∏ –∑–∞ –ª–∏–ø—Å–≤–∞—â–∏ –∫—É—á–µ—Ç–∞
        missing_dogs = []
        for row in csv_dogs:
            reg_code = row['regCode'].strip() if row['regCode'] else None
            dog_name = row['name'].strip()
            
            found = False
            if reg_code:
                # Search by registration number
                dog = db.query(Dog).filter(Dog.registration_number == reg_code).first()
                if dog:
                    found = True
            
            if not found:
                # Search by name if no reg number or not found
                dog = db.query(Dog).filter(Dog.name == dog_name).first()
                if dog:
                    found = True
            
            if not found:
                missing_dogs.append(f"{dog_name} ({reg_code})")
        
        print(f"‚ùå –õ–∏–ø—Å–≤–∞—â–∏ –∫—É—á–µ—Ç–∞: {len(missing_dogs)}")
        if missing_dogs and len(missing_dogs) <= 10:
            for missing in missing_dogs:
                print(f"   - {missing}")
        elif len(missing_dogs) > 10:
            print(f"   –ü—ä—Ä–≤–∏—Ç–µ 10: {missing_dogs[:10]}")
        
        print()
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—Å–∫–∏—Ç–µ –≤—Ä—ä–∑–∫–∏
        print("=== –ê–ù–ê–õ–ò–ó –ù–ê –†–û–î–ò–¢–ï–õ–°–ö–ò–¢–ï –í–†–™–ó–ö–ò ===")
        
        dogs_with_both_parents = 0
        dogs_with_father_only = 0
        dogs_with_mother_only = 0
        orphaned_dogs = 0
        total_relationships = 0
        missing_relationships = []
        
        for row in csv_dogs:
            reg_code = row['regCode'].strip() if row['regCode'] else None
            dog_name = row['name'].strip()
            father_name = row['fatherName'].strip() if row['fatherName'] else None
            mother_name = row['motherName'].strip() if row['motherName'] else None
            
            # Find the dog in database
            dog = None
            if reg_code:
                dog = db.query(Dog).filter(Dog.registration_number == reg_code).first()
            if not dog:
                dog = db.query(Dog).filter(Dog.name == dog_name).first()
            
            if not dog:
                continue
            
            has_father = dog.sire_id is not None
            has_mother = dog.dam_id is not None
            
            if has_father and has_mother:
                dogs_with_both_parents += 1
                total_relationships += 2
            elif has_father:
                dogs_with_father_only += 1
                total_relationships += 1
            elif has_mother:
                dogs_with_mother_only += 1
                total_relationships += 1
            else:
                orphaned_dogs += 1
            
            # Check for missing relationships
            if father_name and not has_father:
                missing_relationships.append(f"{dog_name} - –ª–∏–ø—Å–≤–∞ –±–∞—â–∞: {father_name}")
            if mother_name and not has_mother:
                missing_relationships.append(f"{dog_name} - –ª–∏–ø—Å–≤–∞ –º–∞–π–∫–∞: {mother_name}")
        
        print(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö—É—á–µ—Ç–∞ —Å –¥–≤–∞–º–∞—Ç–∞ —Ä–æ–¥–∏—Ç–µ–ª–∏: {dogs_with_both_parents}")
        print(f"üë®‚Äçüëß‚Äçüë¶ –ö—É—á–µ—Ç–∞ —Å–∞–º–æ —Å –±–∞—â–∞: {dogs_with_father_only}")
        print(f"üë©‚Äçüëß‚Äçüë¶ –ö—É—á–µ—Ç–∞ —Å–∞–º–æ —Å –º–∞–π–∫–∞: {dogs_with_mother_only}")
        print(f"üöº –ö—É—á–µ—Ç–∞ –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–∏: {orphaned_dogs}")
        print(f"üîó –û–±—â–æ —É—Å—Ç–∞–Ω–æ–≤–µ–Ω–∏ –≤—Ä—ä–∑–∫–∏: {total_relationships}")
        print(f"‚ùå –õ–∏–ø—Å–≤–∞—â–∏ –≤—Ä—ä–∑–∫–∏: {len(missing_relationships)}")
        
        if missing_relationships and len(missing_relationships) <= 10:
            print("\n–õ–∏–ø—Å–≤–∞—â–∏ –≤—Ä—ä–∑–∫–∏:")
            for missing in missing_relationships:
                print(f"   - {missing}")
        elif len(missing_relationships) > 10:
            print(f"\n–ü—ä—Ä–≤–∏—Ç–µ 10 –ª–∏–ø—Å–≤–∞—â–∏ –≤—Ä—ä–∑–∫–∏: {missing_relationships[:10]}")
        
        # 5. –ò–∑—á–∏—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print()
        print("=== –§–ò–ù–ê–õ–ù–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===")
        
        expected_dogs = len(csv_dogs)
        imported_count = len(imported_dogs)
        import_success_rate = (imported_count / expected_dogs) * 100 if expected_dogs > 0 else 0
        
        expected_relationships = sum(1 for row in csv_dogs if row['fatherName'].strip()) + sum(1 for row in csv_dogs if row['motherName'].strip())
        relationship_success_rate = (total_relationships / expected_relationships) * 100 if expected_relationships > 0 else 0
        
        print(f"üìä –û—á–∞–∫–≤–∞–Ω–∏ –∫—É—á–µ—Ç–∞ –æ—Ç CSV: {expected_dogs}")
        print(f"üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –∫—É—á–µ—Ç–∞: {imported_count}")
        print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç –Ω–∞ –∏–º–ø–æ—Ä—Ç–∞: {import_success_rate:.1f}%")
        print(f"üîó –û—á–∞–∫–≤–∞–Ω–∏ –≤—Ä—ä–∑–∫–∏: {expected_relationships}")
        print(f"üîó –£—Å—Ç–∞–Ω–æ–≤–µ–Ω–∏ –≤—Ä—ä–∑–∫–∏: {total_relationships}")
        print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç –Ω–∞ –≤—Ä—ä–∑–∫–∏—Ç–µ: {relationship_success_rate:.1f}%")
        print()
        
        # 6. –ü—Ä–∏–º–µ—Ä–Ω–∏ –∑–∞–ø–∏—Å–∏
        print("=== –ü–†–ò–ú–ï–†–ù–ò –ò–ú–ü–û–†–¢–ò–†–ê–ù–ò –ö–£–ß–ï–¢–ê ===")
        sample_dogs = imported_dogs[:5] if len(imported_dogs) >= 5 else imported_dogs
        
        for dog in sample_dogs:
            father_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            mother_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            
            if dog.sire_id:
                father = db.query(Dog).filter(Dog.id == dog.sire_id).first()
                if father:
                    father_name = father.name
            
            if dog.dam_id:
                mother = db.query(Dog).filter(Dog.id == dog.dam_id).first()
                if mother:
                    mother_name = mother.name
            
            print(f"üêï {dog.name} ({dog.registration_number})")
            print(f"   üë® –ë–∞—â–∞: {father_name}")
            print(f"   üë© –ú–∞–π–∫–∞: {mother_name}")
            print()
        
        print("=== –í–ê–õ–ò–î–ê–¶–ò–Ø–¢–ê –ó–ê–í–™–†–®–ï–ù–ê ===")
        
        # Overall success indicator
        overall_success = (
            import_success_rate > 95 and 
            relationship_success_rate > 95 and 
            len(missing_dogs) == 0
        )
        
        print(f"üèÜ –û–±—â —Ä–µ–∑—É–ª—Ç–∞—Ç: {'–£–°–ü–ï–®–ï–ù' if overall_success else '–ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ï–ù'}")
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    run_validation()
